class CRUD {

    /* In the code, `sql;` is declaring a class property called `sql` without assigning it a value.
    This property is used to store the SQL query string generated by the CRUD methods in the class. */
    sql;

    /**
     * The function returns a SQL query string to select all columns from a specified table.
     * @param {String} table - The `table` parameter is the name of the table from which you want to select
     * data.
     * @returns The SQL query string that selects all columns from the specified table.
     */
    select(table) {
        this.sql = `SELECT ?? FROM ${table}`;
        return this.sql;
    }

    /**
     * The function `selectById` returns a SQL query string that selects a row from a specified table
     * based on a given id.
     * @param {String} table - The `table` parameter is the name of the table in the database from which you
     * want to select data.
     * @param {any} id - The `id` parameter is the value that you want to use to filter the rows in the
     * `table`. It is typically used to find a specific row in the table based on its unique
     * identifier.
     * @returns The SQL query string that selects a row from the specified table based on the provided
     * id.
     */
    selectById(table, id) {
        this.sql = `SELECT ?? FROM ${table} WHERE ${id} = ?`;
        return this.sql;
    }

    /**
     * The function updates a specific field in a table based on the provided ID.
     * @param {String} table - The name of the table in the database that you want to update.
     * @param {any} id - The `id` parameter is the identifier of the record that you want to update in the
     * specified table. It is used in the WHERE clause of the SQL query to identify the specific record
     * to be updated.
     * @returns The SQL query string that updates a specific field in a table based on the provided ID.
     */
    updateById(table, id) {
        return this.sql = `UPDATE ${table} SET ? WHERE ${id} = ?`;
    }

    /**
     * The function `insert` returns a SQL query string for inserting data into a specified table.
     * @param {String} table - The `table` parameter is a string that represents the name of the table where the
     * data will be inserted.
     * @returns The SQL query string that inserts a row into the specified table.
     */
    insert(table) {
        return this.sql = `INSERT INTO ${table} SET ?`;
    }

    /**
     * The function deletes a row from a table based on the provided id.
     * @param {String} table - The table parameter is the name of the table from which you want to delete a
     * record.
     * @param {any} id - The `id` parameter represents the unique identifier of the record that you want to
     * delete from the specified table.
     * @returns The SQL query string that deletes a row from the specified table where the id column
     * matches the provided id value.
     */
    deleteById(table, id) {
        return this.sql = `DELETE FROM ${table} WHERE ${id} = ?`;
    }
}

module.exports = CRUD;